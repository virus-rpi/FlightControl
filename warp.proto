syntax = "proto3";

package main;

// Types:
enum Status { // Status of the rocket
  ROCKET_IDLE = 0;
  ROCKET_ARMED = 1;
  ROCKET_BOOSTED_ASCENT = 2;
  ROCKET_POWERED_ASCENT = 3;
  ROCKET_UNPOWERED_ASCENT = 4;
  ROCKET_DESCENT = 5;
  ROCKET_PARACHUTE_DESCENT = 6;
  ROCKET_LANDED = 7;
  ROCKET_ERROR = 8;
}

message Velocity { // Velocity of the rocket
  float x = 1;
  float y = 2;
  float z = 3;
}

enum LoggingStatus { // Status of the logging
  LOGGING_IDLE = 0;
  LOGGING_ACTIVE = 1;
  LOGGING_ERROR = 2;
}

enum BaseStationStatus { // Status of the base station
  BASE_STATION_IDLE = 0;
  BASE_STATION_ARMED = 1;
  BASE_STATION_LAUNCHED = 2;
  BASE_STATION_ABORTED = 3;
  BASE_STATION_UNDER_PRESSURE = 4;
  BASE_STATION_ARMING = 5;
  BASE_STATION_ERROR = 6;
}

// Messages:

message Empty {} // Empty message

message AcknowledgedResponse {} // Acknowledged response

message VoltageResponse { // Voltage response
  int64 voltage = 1; // Voltage in mV
}

message StatusResponse { // Status response
  Status status = 1; // Status of the rocket
}

message AltitudeResponse { // Altitude response
  float altitude = 1; // Altitude in m
}

message AccelerationResponse { // Acceleration of the rocket
  float x = 1; // Acceleration in m/s^2 in x direction
  float y = 2; // Acceleration in m/s^2 in y direction
  float z = 3; // Acceleration in m/s^2 in z direction
}

message RotationResponse { // Rotation response
  float x = 1; // Rotation in deg/s in x direction
  float y = 2; // Rotation in deg/s in y direction
  float z = 3; // Rotation in deg/s in z direction
}

message SpacialDataResponse { // Spacial data response
  AltitudeResponse altitude = 1; // Altitude of the rocket
  AccelerationResponse acceleration = 2; // Acceleration of the rocket
  RotationResponse rotation = 3; // Rotation of the rocket
  Velocity velocity = 4; // Velocity of the rocket
}

message LogResponse { // Log response
  string log = 1; // Log message
}

message LogsResponse { // Logs response
  map<int32, string> logs = 1; // Logs in the format id:timestamp
}

message LoggingStatusResponse { // Logging status response
  LoggingStatus status = 1; // Status of the logging
}

message LogByIdRequest { // Log by id request
  int32 id = 1; // Log id
}

message UpdateLiveDataRequest { // Update live data request
  string  timestamp = 1; // Timestamp of the data
  float maxAltitude = 2; // Max altitude in m
  Status status = 3; // Status of the rocket
  int64 voltage = 4; // Voltage in mV
  SpacialDataResponse spacialData = 5; // Spacial data of the rocket
}

message BaseStationStatusResponse { // Base station status response
  BaseStationStatus status = 1; // Status of the base station
}

message PressureResponse { // Pressure response
  float pressure = 1; // Pressure in Pa
}

message GoalPressureRequest { // Goal pressure request
  float goalPressure = 1; // Goal pressure in Pa
}


// Services:
service WaterRocketService {
  rpc GetVoltage (Empty) returns (VoltageResponse);
  rpc GetStatus (Empty) returns (StatusResponse);
  rpc GetAltitude (Empty) returns (AltitudeResponse);
  rpc GetAcceleration (Empty) returns (AccelerationResponse);
  rpc GetRotation (Empty) returns (RotationResponse);
  rpc GetSpacialData (Empty) returns (SpacialDataResponse);
  rpc GetMaxAltitude (Empty) returns (AltitudeResponse);
  rpc GetMinAltitude (Empty) returns (AltitudeResponse);
  rpc GetLog (Empty) returns (LogResponse);
  rpc GetLogs (Empty) returns (LogsResponse);
  rpc GetLogById (LogByIdRequest) returns (LogResponse);
  rpc GetLoggingStatus (Empty) returns (LoggingStatusResponse);

  rpc Reset (Empty) returns (AcknowledgedResponse);
  rpc Arm (Empty) returns (AcknowledgedResponse);
  rpc Disarm (Empty) returns (AcknowledgedResponse);
  rpc Launch (Empty) returns (AcknowledgedResponse);
  rpc Abort (Empty) returns (AcknowledgedResponse);
  rpc DeployParachute (Empty) returns (AcknowledgedResponse);
  rpc DeployStage (Empty) returns (AcknowledgedResponse);
  rpc LogStart (Empty) returns (AcknowledgedResponse);
  rpc LogStop (Empty) returns (AcknowledgedResponse);
  rpc RecalibrateGyroscope (Empty) returns (AcknowledgedResponse);
  rpc RecalibrateAccelerometer (Empty) returns (AcknowledgedResponse);
  rpc RecalibrateBarometer (Empty) returns (AcknowledgedResponse);
  rpc RecalibrateMagnetometer (Empty) returns (AcknowledgedResponse);
  rpc RecalibrateGPS (Empty) returns (AcknowledgedResponse);
  rpc ResetMax(Empty) returns (AcknowledgedResponse);
  rpc ResetMin(Empty) returns (AcknowledgedResponse);
  rpc ResetGyroscope(Empty) returns (AcknowledgedResponse);
  rpc ResetAccelerometer(Empty) returns (AcknowledgedResponse);
  rpc ResetBarometer(Empty) returns (AcknowledgedResponse);
  rpc ResetMagnetometer(Empty) returns (AcknowledgedResponse);
  rpc ResetGPS(Empty) returns (AcknowledgedResponse);
}

service ControlService {
 rpc UpdateLiveData(UpdateLiveDataRequest) returns (AcknowledgedResponse);
}

service BaseStationService {
  rpc GetStatus (Empty) returns (BaseStationStatusResponse);
  rpc GetPressure (Empty) returns (PressureResponse);
  rpc GetGoalPressure (Empty) returns (PressureResponse);

  rpc SetGoalPressure (GoalPressureRequest) returns (AcknowledgedResponse);
  rpc Abort (Empty) returns (AcknowledgedResponse);
  rpc Arm (Empty) returns (AcknowledgedResponse);
  rpc Disarm (Empty) returns (AcknowledgedResponse);
  rpc Launch (Empty) returns (AcknowledgedResponse);
  rpc RecalibrateBarometer (Empty) returns (AcknowledgedResponse);
  rpc ResetBarometer (Empty) returns (AcknowledgedResponse);
}
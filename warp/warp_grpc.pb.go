// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: warp.proto

package warp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WaterRocketService_GetVoltage_FullMethodName               = "/main.WaterRocketService/GetVoltage"
	WaterRocketService_GetStatus_FullMethodName                = "/main.WaterRocketService/GetStatus"
	WaterRocketService_GetAltitude_FullMethodName              = "/main.WaterRocketService/GetAltitude"
	WaterRocketService_GetAcceleration_FullMethodName          = "/main.WaterRocketService/GetAcceleration"
	WaterRocketService_GetRotation_FullMethodName              = "/main.WaterRocketService/GetRotation"
	WaterRocketService_GetSpacialData_FullMethodName           = "/main.WaterRocketService/GetSpacialData"
	WaterRocketService_GetMaxAltitude_FullMethodName           = "/main.WaterRocketService/GetMaxAltitude"
	WaterRocketService_GetMinAltitude_FullMethodName           = "/main.WaterRocketService/GetMinAltitude"
	WaterRocketService_GetLog_FullMethodName                   = "/main.WaterRocketService/GetLog"
	WaterRocketService_GetLogs_FullMethodName                  = "/main.WaterRocketService/GetLogs"
	WaterRocketService_GetLogById_FullMethodName               = "/main.WaterRocketService/GetLogById"
	WaterRocketService_GetLoggingStatus_FullMethodName         = "/main.WaterRocketService/GetLoggingStatus"
	WaterRocketService_Reset_FullMethodName                    = "/main.WaterRocketService/Reset"
	WaterRocketService_Arm_FullMethodName                      = "/main.WaterRocketService/Arm"
	WaterRocketService_Disarm_FullMethodName                   = "/main.WaterRocketService/Disarm"
	WaterRocketService_Launch_FullMethodName                   = "/main.WaterRocketService/Launch"
	WaterRocketService_Abort_FullMethodName                    = "/main.WaterRocketService/Abort"
	WaterRocketService_DeployParachute_FullMethodName          = "/main.WaterRocketService/DeployParachute"
	WaterRocketService_DeployStage_FullMethodName              = "/main.WaterRocketService/DeployStage"
	WaterRocketService_LogStart_FullMethodName                 = "/main.WaterRocketService/LogStart"
	WaterRocketService_LogStop_FullMethodName                  = "/main.WaterRocketService/LogStop"
	WaterRocketService_RecalibrateGyroscope_FullMethodName     = "/main.WaterRocketService/RecalibrateGyroscope"
	WaterRocketService_RecalibrateAccelerometer_FullMethodName = "/main.WaterRocketService/RecalibrateAccelerometer"
	WaterRocketService_RecalibrateBarometer_FullMethodName     = "/main.WaterRocketService/RecalibrateBarometer"
	WaterRocketService_RecalibrateMagnetometer_FullMethodName  = "/main.WaterRocketService/RecalibrateMagnetometer"
	WaterRocketService_RecalibrateGPS_FullMethodName           = "/main.WaterRocketService/RecalibrateGPS"
	WaterRocketService_ResetMax_FullMethodName                 = "/main.WaterRocketService/ResetMax"
	WaterRocketService_ResetMin_FullMethodName                 = "/main.WaterRocketService/ResetMin"
	WaterRocketService_ResetGyroscope_FullMethodName           = "/main.WaterRocketService/ResetGyroscope"
	WaterRocketService_ResetAccelerometer_FullMethodName       = "/main.WaterRocketService/ResetAccelerometer"
	WaterRocketService_ResetBarometer_FullMethodName           = "/main.WaterRocketService/ResetBarometer"
	WaterRocketService_ResetMagnetometer_FullMethodName        = "/main.WaterRocketService/ResetMagnetometer"
	WaterRocketService_ResetGPS_FullMethodName                 = "/main.WaterRocketService/ResetGPS"
	WaterRocketService_SetControlServiceAddress_FullMethodName = "/main.WaterRocketService/SetControlServiceAddress"
)

// WaterRocketServiceClient is the client API for WaterRocketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Services:
type WaterRocketServiceClient interface {
	GetVoltage(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*VoltageResponse, error)
	GetStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusResponse, error)
	GetAltitude(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AltitudeResponse, error)
	GetAcceleration(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AccelerationResponse, error)
	GetRotation(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RotationResponse, error)
	GetSpacialData(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SpacialDataResponse, error)
	GetMaxAltitude(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AltitudeResponse, error)
	GetMinAltitude(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AltitudeResponse, error)
	GetLog(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LogResponse, error)
	GetLogs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LogsResponse, error)
	GetLogById(ctx context.Context, in *LogByIdRequest, opts ...grpc.CallOption) (*LogResponse, error)
	GetLoggingStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LoggingStatusResponse, error)
	Reset(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error)
	Arm(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error)
	Disarm(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error)
	Launch(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error)
	Abort(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error)
	DeployParachute(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error)
	DeployStage(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error)
	LogStart(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error)
	LogStop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error)
	RecalibrateGyroscope(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error)
	RecalibrateAccelerometer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error)
	RecalibrateBarometer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error)
	RecalibrateMagnetometer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error)
	RecalibrateGPS(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error)
	ResetMax(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error)
	ResetMin(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error)
	ResetGyroscope(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error)
	ResetAccelerometer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error)
	ResetBarometer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error)
	ResetMagnetometer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error)
	ResetGPS(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error)
	SetControlServiceAddress(ctx context.Context, in *SetControlServiceAddressRequest, opts ...grpc.CallOption) (*AcknowledgedResponse, error)
}

type waterRocketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWaterRocketServiceClient(cc grpc.ClientConnInterface) WaterRocketServiceClient {
	return &waterRocketServiceClient{cc}
}

func (c *waterRocketServiceClient) GetVoltage(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*VoltageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VoltageResponse)
	err := c.cc.Invoke(ctx, WaterRocketService_GetVoltage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterRocketServiceClient) GetStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, WaterRocketService_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterRocketServiceClient) GetAltitude(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AltitudeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AltitudeResponse)
	err := c.cc.Invoke(ctx, WaterRocketService_GetAltitude_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterRocketServiceClient) GetAcceleration(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AccelerationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccelerationResponse)
	err := c.cc.Invoke(ctx, WaterRocketService_GetAcceleration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterRocketServiceClient) GetRotation(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RotationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RotationResponse)
	err := c.cc.Invoke(ctx, WaterRocketService_GetRotation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterRocketServiceClient) GetSpacialData(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SpacialDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SpacialDataResponse)
	err := c.cc.Invoke(ctx, WaterRocketService_GetSpacialData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterRocketServiceClient) GetMaxAltitude(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AltitudeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AltitudeResponse)
	err := c.cc.Invoke(ctx, WaterRocketService_GetMaxAltitude_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterRocketServiceClient) GetMinAltitude(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AltitudeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AltitudeResponse)
	err := c.cc.Invoke(ctx, WaterRocketService_GetMinAltitude_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterRocketServiceClient) GetLog(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, WaterRocketService_GetLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterRocketServiceClient) GetLogs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogsResponse)
	err := c.cc.Invoke(ctx, WaterRocketService_GetLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterRocketServiceClient) GetLogById(ctx context.Context, in *LogByIdRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, WaterRocketService_GetLogById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterRocketServiceClient) GetLoggingStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LoggingStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoggingStatusResponse)
	err := c.cc.Invoke(ctx, WaterRocketService_GetLoggingStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterRocketServiceClient) Reset(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcknowledgedResponse)
	err := c.cc.Invoke(ctx, WaterRocketService_Reset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterRocketServiceClient) Arm(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcknowledgedResponse)
	err := c.cc.Invoke(ctx, WaterRocketService_Arm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterRocketServiceClient) Disarm(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcknowledgedResponse)
	err := c.cc.Invoke(ctx, WaterRocketService_Disarm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterRocketServiceClient) Launch(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcknowledgedResponse)
	err := c.cc.Invoke(ctx, WaterRocketService_Launch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterRocketServiceClient) Abort(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcknowledgedResponse)
	err := c.cc.Invoke(ctx, WaterRocketService_Abort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterRocketServiceClient) DeployParachute(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcknowledgedResponse)
	err := c.cc.Invoke(ctx, WaterRocketService_DeployParachute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterRocketServiceClient) DeployStage(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcknowledgedResponse)
	err := c.cc.Invoke(ctx, WaterRocketService_DeployStage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterRocketServiceClient) LogStart(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcknowledgedResponse)
	err := c.cc.Invoke(ctx, WaterRocketService_LogStart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterRocketServiceClient) LogStop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcknowledgedResponse)
	err := c.cc.Invoke(ctx, WaterRocketService_LogStop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterRocketServiceClient) RecalibrateGyroscope(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcknowledgedResponse)
	err := c.cc.Invoke(ctx, WaterRocketService_RecalibrateGyroscope_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterRocketServiceClient) RecalibrateAccelerometer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcknowledgedResponse)
	err := c.cc.Invoke(ctx, WaterRocketService_RecalibrateAccelerometer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterRocketServiceClient) RecalibrateBarometer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcknowledgedResponse)
	err := c.cc.Invoke(ctx, WaterRocketService_RecalibrateBarometer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterRocketServiceClient) RecalibrateMagnetometer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcknowledgedResponse)
	err := c.cc.Invoke(ctx, WaterRocketService_RecalibrateMagnetometer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterRocketServiceClient) RecalibrateGPS(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcknowledgedResponse)
	err := c.cc.Invoke(ctx, WaterRocketService_RecalibrateGPS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterRocketServiceClient) ResetMax(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcknowledgedResponse)
	err := c.cc.Invoke(ctx, WaterRocketService_ResetMax_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterRocketServiceClient) ResetMin(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcknowledgedResponse)
	err := c.cc.Invoke(ctx, WaterRocketService_ResetMin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterRocketServiceClient) ResetGyroscope(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcknowledgedResponse)
	err := c.cc.Invoke(ctx, WaterRocketService_ResetGyroscope_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterRocketServiceClient) ResetAccelerometer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcknowledgedResponse)
	err := c.cc.Invoke(ctx, WaterRocketService_ResetAccelerometer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterRocketServiceClient) ResetBarometer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcknowledgedResponse)
	err := c.cc.Invoke(ctx, WaterRocketService_ResetBarometer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterRocketServiceClient) ResetMagnetometer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcknowledgedResponse)
	err := c.cc.Invoke(ctx, WaterRocketService_ResetMagnetometer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterRocketServiceClient) ResetGPS(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcknowledgedResponse)
	err := c.cc.Invoke(ctx, WaterRocketService_ResetGPS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterRocketServiceClient) SetControlServiceAddress(ctx context.Context, in *SetControlServiceAddressRequest, opts ...grpc.CallOption) (*AcknowledgedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcknowledgedResponse)
	err := c.cc.Invoke(ctx, WaterRocketService_SetControlServiceAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WaterRocketServiceServer is the server API for WaterRocketService service.
// All implementations must embed UnimplementedWaterRocketServiceServer
// for forward compatibility.
//
// Services:
type WaterRocketServiceServer interface {
	GetVoltage(context.Context, *Empty) (*VoltageResponse, error)
	GetStatus(context.Context, *Empty) (*StatusResponse, error)
	GetAltitude(context.Context, *Empty) (*AltitudeResponse, error)
	GetAcceleration(context.Context, *Empty) (*AccelerationResponse, error)
	GetRotation(context.Context, *Empty) (*RotationResponse, error)
	GetSpacialData(context.Context, *Empty) (*SpacialDataResponse, error)
	GetMaxAltitude(context.Context, *Empty) (*AltitudeResponse, error)
	GetMinAltitude(context.Context, *Empty) (*AltitudeResponse, error)
	GetLog(context.Context, *Empty) (*LogResponse, error)
	GetLogs(context.Context, *Empty) (*LogsResponse, error)
	GetLogById(context.Context, *LogByIdRequest) (*LogResponse, error)
	GetLoggingStatus(context.Context, *Empty) (*LoggingStatusResponse, error)
	Reset(context.Context, *Empty) (*AcknowledgedResponse, error)
	Arm(context.Context, *Empty) (*AcknowledgedResponse, error)
	Disarm(context.Context, *Empty) (*AcknowledgedResponse, error)
	Launch(context.Context, *Empty) (*AcknowledgedResponse, error)
	Abort(context.Context, *Empty) (*AcknowledgedResponse, error)
	DeployParachute(context.Context, *Empty) (*AcknowledgedResponse, error)
	DeployStage(context.Context, *Empty) (*AcknowledgedResponse, error)
	LogStart(context.Context, *Empty) (*AcknowledgedResponse, error)
	LogStop(context.Context, *Empty) (*AcknowledgedResponse, error)
	RecalibrateGyroscope(context.Context, *Empty) (*AcknowledgedResponse, error)
	RecalibrateAccelerometer(context.Context, *Empty) (*AcknowledgedResponse, error)
	RecalibrateBarometer(context.Context, *Empty) (*AcknowledgedResponse, error)
	RecalibrateMagnetometer(context.Context, *Empty) (*AcknowledgedResponse, error)
	RecalibrateGPS(context.Context, *Empty) (*AcknowledgedResponse, error)
	ResetMax(context.Context, *Empty) (*AcknowledgedResponse, error)
	ResetMin(context.Context, *Empty) (*AcknowledgedResponse, error)
	ResetGyroscope(context.Context, *Empty) (*AcknowledgedResponse, error)
	ResetAccelerometer(context.Context, *Empty) (*AcknowledgedResponse, error)
	ResetBarometer(context.Context, *Empty) (*AcknowledgedResponse, error)
	ResetMagnetometer(context.Context, *Empty) (*AcknowledgedResponse, error)
	ResetGPS(context.Context, *Empty) (*AcknowledgedResponse, error)
	SetControlServiceAddress(context.Context, *SetControlServiceAddressRequest) (*AcknowledgedResponse, error)
	mustEmbedUnimplementedWaterRocketServiceServer()
}

// UnimplementedWaterRocketServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWaterRocketServiceServer struct{}

func (UnimplementedWaterRocketServiceServer) GetVoltage(context.Context, *Empty) (*VoltageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVoltage not implemented")
}
func (UnimplementedWaterRocketServiceServer) GetStatus(context.Context, *Empty) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedWaterRocketServiceServer) GetAltitude(context.Context, *Empty) (*AltitudeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAltitude not implemented")
}
func (UnimplementedWaterRocketServiceServer) GetAcceleration(context.Context, *Empty) (*AccelerationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAcceleration not implemented")
}
func (UnimplementedWaterRocketServiceServer) GetRotation(context.Context, *Empty) (*RotationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRotation not implemented")
}
func (UnimplementedWaterRocketServiceServer) GetSpacialData(context.Context, *Empty) (*SpacialDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpacialData not implemented")
}
func (UnimplementedWaterRocketServiceServer) GetMaxAltitude(context.Context, *Empty) (*AltitudeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMaxAltitude not implemented")
}
func (UnimplementedWaterRocketServiceServer) GetMinAltitude(context.Context, *Empty) (*AltitudeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinAltitude not implemented")
}
func (UnimplementedWaterRocketServiceServer) GetLog(context.Context, *Empty) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLog not implemented")
}
func (UnimplementedWaterRocketServiceServer) GetLogs(context.Context, *Empty) (*LogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (UnimplementedWaterRocketServiceServer) GetLogById(context.Context, *LogByIdRequest) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogById not implemented")
}
func (UnimplementedWaterRocketServiceServer) GetLoggingStatus(context.Context, *Empty) (*LoggingStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoggingStatus not implemented")
}
func (UnimplementedWaterRocketServiceServer) Reset(context.Context, *Empty) (*AcknowledgedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedWaterRocketServiceServer) Arm(context.Context, *Empty) (*AcknowledgedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Arm not implemented")
}
func (UnimplementedWaterRocketServiceServer) Disarm(context.Context, *Empty) (*AcknowledgedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disarm not implemented")
}
func (UnimplementedWaterRocketServiceServer) Launch(context.Context, *Empty) (*AcknowledgedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Launch not implemented")
}
func (UnimplementedWaterRocketServiceServer) Abort(context.Context, *Empty) (*AcknowledgedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Abort not implemented")
}
func (UnimplementedWaterRocketServiceServer) DeployParachute(context.Context, *Empty) (*AcknowledgedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployParachute not implemented")
}
func (UnimplementedWaterRocketServiceServer) DeployStage(context.Context, *Empty) (*AcknowledgedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployStage not implemented")
}
func (UnimplementedWaterRocketServiceServer) LogStart(context.Context, *Empty) (*AcknowledgedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogStart not implemented")
}
func (UnimplementedWaterRocketServiceServer) LogStop(context.Context, *Empty) (*AcknowledgedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogStop not implemented")
}
func (UnimplementedWaterRocketServiceServer) RecalibrateGyroscope(context.Context, *Empty) (*AcknowledgedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecalibrateGyroscope not implemented")
}
func (UnimplementedWaterRocketServiceServer) RecalibrateAccelerometer(context.Context, *Empty) (*AcknowledgedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecalibrateAccelerometer not implemented")
}
func (UnimplementedWaterRocketServiceServer) RecalibrateBarometer(context.Context, *Empty) (*AcknowledgedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecalibrateBarometer not implemented")
}
func (UnimplementedWaterRocketServiceServer) RecalibrateMagnetometer(context.Context, *Empty) (*AcknowledgedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecalibrateMagnetometer not implemented")
}
func (UnimplementedWaterRocketServiceServer) RecalibrateGPS(context.Context, *Empty) (*AcknowledgedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecalibrateGPS not implemented")
}
func (UnimplementedWaterRocketServiceServer) ResetMax(context.Context, *Empty) (*AcknowledgedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetMax not implemented")
}
func (UnimplementedWaterRocketServiceServer) ResetMin(context.Context, *Empty) (*AcknowledgedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetMin not implemented")
}
func (UnimplementedWaterRocketServiceServer) ResetGyroscope(context.Context, *Empty) (*AcknowledgedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetGyroscope not implemented")
}
func (UnimplementedWaterRocketServiceServer) ResetAccelerometer(context.Context, *Empty) (*AcknowledgedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetAccelerometer not implemented")
}
func (UnimplementedWaterRocketServiceServer) ResetBarometer(context.Context, *Empty) (*AcknowledgedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetBarometer not implemented")
}
func (UnimplementedWaterRocketServiceServer) ResetMagnetometer(context.Context, *Empty) (*AcknowledgedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetMagnetometer not implemented")
}
func (UnimplementedWaterRocketServiceServer) ResetGPS(context.Context, *Empty) (*AcknowledgedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetGPS not implemented")
}
func (UnimplementedWaterRocketServiceServer) SetControlServiceAddress(context.Context, *SetControlServiceAddressRequest) (*AcknowledgedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetControlServiceAddress not implemented")
}
func (UnimplementedWaterRocketServiceServer) mustEmbedUnimplementedWaterRocketServiceServer() {}
func (UnimplementedWaterRocketServiceServer) testEmbeddedByValue()                            {}

// UnsafeWaterRocketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WaterRocketServiceServer will
// result in compilation errors.
type UnsafeWaterRocketServiceServer interface {
	mustEmbedUnimplementedWaterRocketServiceServer()
}

func RegisterWaterRocketServiceServer(s grpc.ServiceRegistrar, srv WaterRocketServiceServer) {
	// If the following call pancis, it indicates UnimplementedWaterRocketServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WaterRocketService_ServiceDesc, srv)
}

func _WaterRocketService_GetVoltage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterRocketServiceServer).GetVoltage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterRocketService_GetVoltage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterRocketServiceServer).GetVoltage(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterRocketService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterRocketServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterRocketService_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterRocketServiceServer).GetStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterRocketService_GetAltitude_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterRocketServiceServer).GetAltitude(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterRocketService_GetAltitude_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterRocketServiceServer).GetAltitude(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterRocketService_GetAcceleration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterRocketServiceServer).GetAcceleration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterRocketService_GetAcceleration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterRocketServiceServer).GetAcceleration(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterRocketService_GetRotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterRocketServiceServer).GetRotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterRocketService_GetRotation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterRocketServiceServer).GetRotation(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterRocketService_GetSpacialData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterRocketServiceServer).GetSpacialData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterRocketService_GetSpacialData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterRocketServiceServer).GetSpacialData(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterRocketService_GetMaxAltitude_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterRocketServiceServer).GetMaxAltitude(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterRocketService_GetMaxAltitude_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterRocketServiceServer).GetMaxAltitude(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterRocketService_GetMinAltitude_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterRocketServiceServer).GetMinAltitude(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterRocketService_GetMinAltitude_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterRocketServiceServer).GetMinAltitude(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterRocketService_GetLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterRocketServiceServer).GetLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterRocketService_GetLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterRocketServiceServer).GetLog(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterRocketService_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterRocketServiceServer).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterRocketService_GetLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterRocketServiceServer).GetLogs(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterRocketService_GetLogById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterRocketServiceServer).GetLogById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterRocketService_GetLogById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterRocketServiceServer).GetLogById(ctx, req.(*LogByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterRocketService_GetLoggingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterRocketServiceServer).GetLoggingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterRocketService_GetLoggingStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterRocketServiceServer).GetLoggingStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterRocketService_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterRocketServiceServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterRocketService_Reset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterRocketServiceServer).Reset(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterRocketService_Arm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterRocketServiceServer).Arm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterRocketService_Arm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterRocketServiceServer).Arm(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterRocketService_Disarm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterRocketServiceServer).Disarm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterRocketService_Disarm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterRocketServiceServer).Disarm(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterRocketService_Launch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterRocketServiceServer).Launch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterRocketService_Launch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterRocketServiceServer).Launch(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterRocketService_Abort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterRocketServiceServer).Abort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterRocketService_Abort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterRocketServiceServer).Abort(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterRocketService_DeployParachute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterRocketServiceServer).DeployParachute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterRocketService_DeployParachute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterRocketServiceServer).DeployParachute(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterRocketService_DeployStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterRocketServiceServer).DeployStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterRocketService_DeployStage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterRocketServiceServer).DeployStage(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterRocketService_LogStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterRocketServiceServer).LogStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterRocketService_LogStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterRocketServiceServer).LogStart(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterRocketService_LogStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterRocketServiceServer).LogStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterRocketService_LogStop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterRocketServiceServer).LogStop(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterRocketService_RecalibrateGyroscope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterRocketServiceServer).RecalibrateGyroscope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterRocketService_RecalibrateGyroscope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterRocketServiceServer).RecalibrateGyroscope(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterRocketService_RecalibrateAccelerometer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterRocketServiceServer).RecalibrateAccelerometer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterRocketService_RecalibrateAccelerometer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterRocketServiceServer).RecalibrateAccelerometer(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterRocketService_RecalibrateBarometer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterRocketServiceServer).RecalibrateBarometer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterRocketService_RecalibrateBarometer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterRocketServiceServer).RecalibrateBarometer(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterRocketService_RecalibrateMagnetometer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterRocketServiceServer).RecalibrateMagnetometer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterRocketService_RecalibrateMagnetometer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterRocketServiceServer).RecalibrateMagnetometer(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterRocketService_RecalibrateGPS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterRocketServiceServer).RecalibrateGPS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterRocketService_RecalibrateGPS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterRocketServiceServer).RecalibrateGPS(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterRocketService_ResetMax_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterRocketServiceServer).ResetMax(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterRocketService_ResetMax_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterRocketServiceServer).ResetMax(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterRocketService_ResetMin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterRocketServiceServer).ResetMin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterRocketService_ResetMin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterRocketServiceServer).ResetMin(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterRocketService_ResetGyroscope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterRocketServiceServer).ResetGyroscope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterRocketService_ResetGyroscope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterRocketServiceServer).ResetGyroscope(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterRocketService_ResetAccelerometer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterRocketServiceServer).ResetAccelerometer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterRocketService_ResetAccelerometer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterRocketServiceServer).ResetAccelerometer(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterRocketService_ResetBarometer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterRocketServiceServer).ResetBarometer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterRocketService_ResetBarometer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterRocketServiceServer).ResetBarometer(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterRocketService_ResetMagnetometer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterRocketServiceServer).ResetMagnetometer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterRocketService_ResetMagnetometer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterRocketServiceServer).ResetMagnetometer(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterRocketService_ResetGPS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterRocketServiceServer).ResetGPS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterRocketService_ResetGPS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterRocketServiceServer).ResetGPS(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterRocketService_SetControlServiceAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetControlServiceAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterRocketServiceServer).SetControlServiceAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterRocketService_SetControlServiceAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterRocketServiceServer).SetControlServiceAddress(ctx, req.(*SetControlServiceAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WaterRocketService_ServiceDesc is the grpc.ServiceDesc for WaterRocketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WaterRocketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.WaterRocketService",
	HandlerType: (*WaterRocketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVoltage",
			Handler:    _WaterRocketService_GetVoltage_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _WaterRocketService_GetStatus_Handler,
		},
		{
			MethodName: "GetAltitude",
			Handler:    _WaterRocketService_GetAltitude_Handler,
		},
		{
			MethodName: "GetAcceleration",
			Handler:    _WaterRocketService_GetAcceleration_Handler,
		},
		{
			MethodName: "GetRotation",
			Handler:    _WaterRocketService_GetRotation_Handler,
		},
		{
			MethodName: "GetSpacialData",
			Handler:    _WaterRocketService_GetSpacialData_Handler,
		},
		{
			MethodName: "GetMaxAltitude",
			Handler:    _WaterRocketService_GetMaxAltitude_Handler,
		},
		{
			MethodName: "GetMinAltitude",
			Handler:    _WaterRocketService_GetMinAltitude_Handler,
		},
		{
			MethodName: "GetLog",
			Handler:    _WaterRocketService_GetLog_Handler,
		},
		{
			MethodName: "GetLogs",
			Handler:    _WaterRocketService_GetLogs_Handler,
		},
		{
			MethodName: "GetLogById",
			Handler:    _WaterRocketService_GetLogById_Handler,
		},
		{
			MethodName: "GetLoggingStatus",
			Handler:    _WaterRocketService_GetLoggingStatus_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _WaterRocketService_Reset_Handler,
		},
		{
			MethodName: "Arm",
			Handler:    _WaterRocketService_Arm_Handler,
		},
		{
			MethodName: "Disarm",
			Handler:    _WaterRocketService_Disarm_Handler,
		},
		{
			MethodName: "Launch",
			Handler:    _WaterRocketService_Launch_Handler,
		},
		{
			MethodName: "Abort",
			Handler:    _WaterRocketService_Abort_Handler,
		},
		{
			MethodName: "DeployParachute",
			Handler:    _WaterRocketService_DeployParachute_Handler,
		},
		{
			MethodName: "DeployStage",
			Handler:    _WaterRocketService_DeployStage_Handler,
		},
		{
			MethodName: "LogStart",
			Handler:    _WaterRocketService_LogStart_Handler,
		},
		{
			MethodName: "LogStop",
			Handler:    _WaterRocketService_LogStop_Handler,
		},
		{
			MethodName: "RecalibrateGyroscope",
			Handler:    _WaterRocketService_RecalibrateGyroscope_Handler,
		},
		{
			MethodName: "RecalibrateAccelerometer",
			Handler:    _WaterRocketService_RecalibrateAccelerometer_Handler,
		},
		{
			MethodName: "RecalibrateBarometer",
			Handler:    _WaterRocketService_RecalibrateBarometer_Handler,
		},
		{
			MethodName: "RecalibrateMagnetometer",
			Handler:    _WaterRocketService_RecalibrateMagnetometer_Handler,
		},
		{
			MethodName: "RecalibrateGPS",
			Handler:    _WaterRocketService_RecalibrateGPS_Handler,
		},
		{
			MethodName: "ResetMax",
			Handler:    _WaterRocketService_ResetMax_Handler,
		},
		{
			MethodName: "ResetMin",
			Handler:    _WaterRocketService_ResetMin_Handler,
		},
		{
			MethodName: "ResetGyroscope",
			Handler:    _WaterRocketService_ResetGyroscope_Handler,
		},
		{
			MethodName: "ResetAccelerometer",
			Handler:    _WaterRocketService_ResetAccelerometer_Handler,
		},
		{
			MethodName: "ResetBarometer",
			Handler:    _WaterRocketService_ResetBarometer_Handler,
		},
		{
			MethodName: "ResetMagnetometer",
			Handler:    _WaterRocketService_ResetMagnetometer_Handler,
		},
		{
			MethodName: "ResetGPS",
			Handler:    _WaterRocketService_ResetGPS_Handler,
		},
		{
			MethodName: "SetControlServiceAddress",
			Handler:    _WaterRocketService_SetControlServiceAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "warp.proto",
}

const (
	ControlService_UpdateLiveData_FullMethodName = "/main.ControlService/UpdateLiveData"
)

// ControlServiceClient is the client API for ControlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControlServiceClient interface {
	UpdateLiveData(ctx context.Context, in *UpdateLiveDataRequest, opts ...grpc.CallOption) (*AcknowledgedResponse, error)
}

type controlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewControlServiceClient(cc grpc.ClientConnInterface) ControlServiceClient {
	return &controlServiceClient{cc}
}

func (c *controlServiceClient) UpdateLiveData(ctx context.Context, in *UpdateLiveDataRequest, opts ...grpc.CallOption) (*AcknowledgedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcknowledgedResponse)
	err := c.cc.Invoke(ctx, ControlService_UpdateLiveData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControlServiceServer is the server API for ControlService service.
// All implementations must embed UnimplementedControlServiceServer
// for forward compatibility.
type ControlServiceServer interface {
	UpdateLiveData(context.Context, *UpdateLiveDataRequest) (*AcknowledgedResponse, error)
	mustEmbedUnimplementedControlServiceServer()
}

// UnimplementedControlServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedControlServiceServer struct{}

func (UnimplementedControlServiceServer) UpdateLiveData(context.Context, *UpdateLiveDataRequest) (*AcknowledgedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLiveData not implemented")
}
func (UnimplementedControlServiceServer) mustEmbedUnimplementedControlServiceServer() {}
func (UnimplementedControlServiceServer) testEmbeddedByValue()                        {}

// UnsafeControlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControlServiceServer will
// result in compilation errors.
type UnsafeControlServiceServer interface {
	mustEmbedUnimplementedControlServiceServer()
}

func RegisterControlServiceServer(s grpc.ServiceRegistrar, srv ControlServiceServer) {
	// If the following call pancis, it indicates UnimplementedControlServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ControlService_ServiceDesc, srv)
}

func _ControlService_UpdateLiveData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLiveDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).UpdateLiveData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlService_UpdateLiveData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).UpdateLiveData(ctx, req.(*UpdateLiveDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ControlService_ServiceDesc is the grpc.ServiceDesc for ControlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ControlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.ControlService",
	HandlerType: (*ControlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateLiveData",
			Handler:    _ControlService_UpdateLiveData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "warp.proto",
}

const (
	BaseStationService_GetStatus_FullMethodName            = "/main.BaseStationService/GetStatus"
	BaseStationService_GetPressure_FullMethodName          = "/main.BaseStationService/GetPressure"
	BaseStationService_GetGoalPressure_FullMethodName      = "/main.BaseStationService/GetGoalPressure"
	BaseStationService_SetGoalPressure_FullMethodName      = "/main.BaseStationService/SetGoalPressure"
	BaseStationService_Abort_FullMethodName                = "/main.BaseStationService/Abort"
	BaseStationService_Arm_FullMethodName                  = "/main.BaseStationService/Arm"
	BaseStationService_Disarm_FullMethodName               = "/main.BaseStationService/Disarm"
	BaseStationService_Launch_FullMethodName               = "/main.BaseStationService/Launch"
	BaseStationService_RecalibrateBarometer_FullMethodName = "/main.BaseStationService/RecalibrateBarometer"
	BaseStationService_ResetBarometer_FullMethodName       = "/main.BaseStationService/ResetBarometer"
)

// BaseStationServiceClient is the client API for BaseStationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BaseStationServiceClient interface {
	GetStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseStationStatusResponse, error)
	GetPressure(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PressureResponse, error)
	GetGoalPressure(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PressureResponse, error)
	SetGoalPressure(ctx context.Context, in *GoalPressureRequest, opts ...grpc.CallOption) (*AcknowledgedResponse, error)
	Abort(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error)
	Arm(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error)
	Disarm(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error)
	Launch(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error)
	RecalibrateBarometer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error)
	ResetBarometer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error)
}

type baseStationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBaseStationServiceClient(cc grpc.ClientConnInterface) BaseStationServiceClient {
	return &baseStationServiceClient{cc}
}

func (c *baseStationServiceClient) GetStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseStationStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseStationStatusResponse)
	err := c.cc.Invoke(ctx, BaseStationService_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseStationServiceClient) GetPressure(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PressureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PressureResponse)
	err := c.cc.Invoke(ctx, BaseStationService_GetPressure_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseStationServiceClient) GetGoalPressure(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PressureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PressureResponse)
	err := c.cc.Invoke(ctx, BaseStationService_GetGoalPressure_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseStationServiceClient) SetGoalPressure(ctx context.Context, in *GoalPressureRequest, opts ...grpc.CallOption) (*AcknowledgedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcknowledgedResponse)
	err := c.cc.Invoke(ctx, BaseStationService_SetGoalPressure_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseStationServiceClient) Abort(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcknowledgedResponse)
	err := c.cc.Invoke(ctx, BaseStationService_Abort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseStationServiceClient) Arm(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcknowledgedResponse)
	err := c.cc.Invoke(ctx, BaseStationService_Arm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseStationServiceClient) Disarm(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcknowledgedResponse)
	err := c.cc.Invoke(ctx, BaseStationService_Disarm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseStationServiceClient) Launch(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcknowledgedResponse)
	err := c.cc.Invoke(ctx, BaseStationService_Launch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseStationServiceClient) RecalibrateBarometer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcknowledgedResponse)
	err := c.cc.Invoke(ctx, BaseStationService_RecalibrateBarometer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseStationServiceClient) ResetBarometer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AcknowledgedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcknowledgedResponse)
	err := c.cc.Invoke(ctx, BaseStationService_ResetBarometer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BaseStationServiceServer is the server API for BaseStationService service.
// All implementations must embed UnimplementedBaseStationServiceServer
// for forward compatibility.
type BaseStationServiceServer interface {
	GetStatus(context.Context, *Empty) (*BaseStationStatusResponse, error)
	GetPressure(context.Context, *Empty) (*PressureResponse, error)
	GetGoalPressure(context.Context, *Empty) (*PressureResponse, error)
	SetGoalPressure(context.Context, *GoalPressureRequest) (*AcknowledgedResponse, error)
	Abort(context.Context, *Empty) (*AcknowledgedResponse, error)
	Arm(context.Context, *Empty) (*AcknowledgedResponse, error)
	Disarm(context.Context, *Empty) (*AcknowledgedResponse, error)
	Launch(context.Context, *Empty) (*AcknowledgedResponse, error)
	RecalibrateBarometer(context.Context, *Empty) (*AcknowledgedResponse, error)
	ResetBarometer(context.Context, *Empty) (*AcknowledgedResponse, error)
	mustEmbedUnimplementedBaseStationServiceServer()
}

// UnimplementedBaseStationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBaseStationServiceServer struct{}

func (UnimplementedBaseStationServiceServer) GetStatus(context.Context, *Empty) (*BaseStationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedBaseStationServiceServer) GetPressure(context.Context, *Empty) (*PressureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPressure not implemented")
}
func (UnimplementedBaseStationServiceServer) GetGoalPressure(context.Context, *Empty) (*PressureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoalPressure not implemented")
}
func (UnimplementedBaseStationServiceServer) SetGoalPressure(context.Context, *GoalPressureRequest) (*AcknowledgedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGoalPressure not implemented")
}
func (UnimplementedBaseStationServiceServer) Abort(context.Context, *Empty) (*AcknowledgedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Abort not implemented")
}
func (UnimplementedBaseStationServiceServer) Arm(context.Context, *Empty) (*AcknowledgedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Arm not implemented")
}
func (UnimplementedBaseStationServiceServer) Disarm(context.Context, *Empty) (*AcknowledgedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disarm not implemented")
}
func (UnimplementedBaseStationServiceServer) Launch(context.Context, *Empty) (*AcknowledgedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Launch not implemented")
}
func (UnimplementedBaseStationServiceServer) RecalibrateBarometer(context.Context, *Empty) (*AcknowledgedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecalibrateBarometer not implemented")
}
func (UnimplementedBaseStationServiceServer) ResetBarometer(context.Context, *Empty) (*AcknowledgedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetBarometer not implemented")
}
func (UnimplementedBaseStationServiceServer) mustEmbedUnimplementedBaseStationServiceServer() {}
func (UnimplementedBaseStationServiceServer) testEmbeddedByValue()                            {}

// UnsafeBaseStationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BaseStationServiceServer will
// result in compilation errors.
type UnsafeBaseStationServiceServer interface {
	mustEmbedUnimplementedBaseStationServiceServer()
}

func RegisterBaseStationServiceServer(s grpc.ServiceRegistrar, srv BaseStationServiceServer) {
	// If the following call pancis, it indicates UnimplementedBaseStationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BaseStationService_ServiceDesc, srv)
}

func _BaseStationService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseStationServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseStationService_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseStationServiceServer).GetStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseStationService_GetPressure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseStationServiceServer).GetPressure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseStationService_GetPressure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseStationServiceServer).GetPressure(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseStationService_GetGoalPressure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseStationServiceServer).GetGoalPressure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseStationService_GetGoalPressure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseStationServiceServer).GetGoalPressure(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseStationService_SetGoalPressure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoalPressureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseStationServiceServer).SetGoalPressure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseStationService_SetGoalPressure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseStationServiceServer).SetGoalPressure(ctx, req.(*GoalPressureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseStationService_Abort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseStationServiceServer).Abort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseStationService_Abort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseStationServiceServer).Abort(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseStationService_Arm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseStationServiceServer).Arm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseStationService_Arm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseStationServiceServer).Arm(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseStationService_Disarm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseStationServiceServer).Disarm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseStationService_Disarm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseStationServiceServer).Disarm(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseStationService_Launch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseStationServiceServer).Launch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseStationService_Launch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseStationServiceServer).Launch(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseStationService_RecalibrateBarometer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseStationServiceServer).RecalibrateBarometer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseStationService_RecalibrateBarometer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseStationServiceServer).RecalibrateBarometer(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseStationService_ResetBarometer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseStationServiceServer).ResetBarometer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseStationService_ResetBarometer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseStationServiceServer).ResetBarometer(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BaseStationService_ServiceDesc is the grpc.ServiceDesc for BaseStationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BaseStationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.BaseStationService",
	HandlerType: (*BaseStationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _BaseStationService_GetStatus_Handler,
		},
		{
			MethodName: "GetPressure",
			Handler:    _BaseStationService_GetPressure_Handler,
		},
		{
			MethodName: "GetGoalPressure",
			Handler:    _BaseStationService_GetGoalPressure_Handler,
		},
		{
			MethodName: "SetGoalPressure",
			Handler:    _BaseStationService_SetGoalPressure_Handler,
		},
		{
			MethodName: "Abort",
			Handler:    _BaseStationService_Abort_Handler,
		},
		{
			MethodName: "Arm",
			Handler:    _BaseStationService_Arm_Handler,
		},
		{
			MethodName: "Disarm",
			Handler:    _BaseStationService_Disarm_Handler,
		},
		{
			MethodName: "Launch",
			Handler:    _BaseStationService_Launch_Handler,
		},
		{
			MethodName: "RecalibrateBarometer",
			Handler:    _BaseStationService_RecalibrateBarometer_Handler,
		},
		{
			MethodName: "ResetBarometer",
			Handler:    _BaseStationService_ResetBarometer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "warp.proto",
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: warp.proto

package warp

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Types:
type Status int32

const (
	Status_ROCKET_IDLE              Status = 0
	Status_ROCKET_ARMED             Status = 1
	Status_ROCKET_BOOSTED_ASCENT    Status = 2
	Status_ROCKET_POWERED_ASCENT    Status = 3
	Status_ROCKET_UNPOWERED_ASCENT  Status = 4
	Status_ROCKET_DESCENT           Status = 5
	Status_ROCKET_PARACHUTE_DESCENT Status = 6
	Status_ROCKET_LANDED            Status = 7
	Status_ROCKET_ERROR             Status = 8
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "ROCKET_IDLE",
		1: "ROCKET_ARMED",
		2: "ROCKET_BOOSTED_ASCENT",
		3: "ROCKET_POWERED_ASCENT",
		4: "ROCKET_UNPOWERED_ASCENT",
		5: "ROCKET_DESCENT",
		6: "ROCKET_PARACHUTE_DESCENT",
		7: "ROCKET_LANDED",
		8: "ROCKET_ERROR",
	}
	Status_value = map[string]int32{
		"ROCKET_IDLE":              0,
		"ROCKET_ARMED":             1,
		"ROCKET_BOOSTED_ASCENT":    2,
		"ROCKET_POWERED_ASCENT":    3,
		"ROCKET_UNPOWERED_ASCENT":  4,
		"ROCKET_DESCENT":           5,
		"ROCKET_PARACHUTE_DESCENT": 6,
		"ROCKET_LANDED":            7,
		"ROCKET_ERROR":             8,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_warp_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_warp_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_warp_proto_rawDescGZIP(), []int{0}
}

type LoggingStatus int32

const (
	LoggingStatus_LOGGING_IDLE   LoggingStatus = 0
	LoggingStatus_LOGGING_ACTIVE LoggingStatus = 1
	LoggingStatus_LOGGING_ERROR  LoggingStatus = 2
)

// Enum value maps for LoggingStatus.
var (
	LoggingStatus_name = map[int32]string{
		0: "LOGGING_IDLE",
		1: "LOGGING_ACTIVE",
		2: "LOGGING_ERROR",
	}
	LoggingStatus_value = map[string]int32{
		"LOGGING_IDLE":   0,
		"LOGGING_ACTIVE": 1,
		"LOGGING_ERROR":  2,
	}
)

func (x LoggingStatus) Enum() *LoggingStatus {
	p := new(LoggingStatus)
	*p = x
	return p
}

func (x LoggingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoggingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_warp_proto_enumTypes[1].Descriptor()
}

func (LoggingStatus) Type() protoreflect.EnumType {
	return &file_warp_proto_enumTypes[1]
}

func (x LoggingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoggingStatus.Descriptor instead.
func (LoggingStatus) EnumDescriptor() ([]byte, []int) {
	return file_warp_proto_rawDescGZIP(), []int{1}
}

type BaseStationStatus int32

const (
	BaseStationStatus_BASE_STATION_IDLE           BaseStationStatus = 0
	BaseStationStatus_BASE_STATION_ARMED          BaseStationStatus = 1
	BaseStationStatus_BASE_STATION_LAUNCHED       BaseStationStatus = 2
	BaseStationStatus_BASE_STATION_ABORTED        BaseStationStatus = 3
	BaseStationStatus_BASE_STATION_UNDER_PRESSURE BaseStationStatus = 4
	BaseStationStatus_BASE_STATION_ARMING         BaseStationStatus = 5
	BaseStationStatus_BASE_STATION_ERROR          BaseStationStatus = 6
)

// Enum value maps for BaseStationStatus.
var (
	BaseStationStatus_name = map[int32]string{
		0: "BASE_STATION_IDLE",
		1: "BASE_STATION_ARMED",
		2: "BASE_STATION_LAUNCHED",
		3: "BASE_STATION_ABORTED",
		4: "BASE_STATION_UNDER_PRESSURE",
		5: "BASE_STATION_ARMING",
		6: "BASE_STATION_ERROR",
	}
	BaseStationStatus_value = map[string]int32{
		"BASE_STATION_IDLE":           0,
		"BASE_STATION_ARMED":          1,
		"BASE_STATION_LAUNCHED":       2,
		"BASE_STATION_ABORTED":        3,
		"BASE_STATION_UNDER_PRESSURE": 4,
		"BASE_STATION_ARMING":         5,
		"BASE_STATION_ERROR":          6,
	}
)

func (x BaseStationStatus) Enum() *BaseStationStatus {
	p := new(BaseStationStatus)
	*p = x
	return p
}

func (x BaseStationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BaseStationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_warp_proto_enumTypes[2].Descriptor()
}

func (BaseStationStatus) Type() protoreflect.EnumType {
	return &file_warp_proto_enumTypes[2]
}

func (x BaseStationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BaseStationStatus.Descriptor instead.
func (BaseStationStatus) EnumDescriptor() ([]byte, []int) {
	return file_warp_proto_rawDescGZIP(), []int{2}
}

type Velocity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float32 `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *Velocity) Reset() {
	*x = Velocity{}
	mi := &file_warp_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Velocity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Velocity) ProtoMessage() {}

func (x *Velocity) ProtoReflect() protoreflect.Message {
	mi := &file_warp_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Velocity.ProtoReflect.Descriptor instead.
func (*Velocity) Descriptor() ([]byte, []int) {
	return file_warp_proto_rawDescGZIP(), []int{0}
}

func (x *Velocity) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Velocity) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Velocity) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_warp_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_warp_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_warp_proto_rawDescGZIP(), []int{1}
}

type AcknowledgedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AcknowledgedResponse) Reset() {
	*x = AcknowledgedResponse{}
	mi := &file_warp_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcknowledgedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcknowledgedResponse) ProtoMessage() {}

func (x *AcknowledgedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_warp_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcknowledgedResponse.ProtoReflect.Descriptor instead.
func (*AcknowledgedResponse) Descriptor() ([]byte, []int) {
	return file_warp_proto_rawDescGZIP(), []int{2}
}

type VoltageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Voltage int64 `protobuf:"varint,1,opt,name=voltage,proto3" json:"voltage,omitempty"` // Voltage in mV
}

func (x *VoltageResponse) Reset() {
	*x = VoltageResponse{}
	mi := &file_warp_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VoltageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoltageResponse) ProtoMessage() {}

func (x *VoltageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_warp_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoltageResponse.ProtoReflect.Descriptor instead.
func (*VoltageResponse) Descriptor() ([]byte, []int) {
	return file_warp_proto_rawDescGZIP(), []int{3}
}

func (x *VoltageResponse) GetVoltage() int64 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=main.Status" json:"status,omitempty"` // Status of the rocket
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	mi := &file_warp_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_warp_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_warp_proto_rawDescGZIP(), []int{4}
}

func (x *StatusResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_ROCKET_IDLE
}

type AltitudeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Altitude float32 `protobuf:"fixed32,1,opt,name=altitude,proto3" json:"altitude,omitempty"` // Altitude in m
}

func (x *AltitudeResponse) Reset() {
	*x = AltitudeResponse{}
	mi := &file_warp_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AltitudeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AltitudeResponse) ProtoMessage() {}

func (x *AltitudeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_warp_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AltitudeResponse.ProtoReflect.Descriptor instead.
func (*AltitudeResponse) Descriptor() ([]byte, []int) {
	return file_warp_proto_rawDescGZIP(), []int{5}
}

func (x *AltitudeResponse) GetAltitude() float32 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

type AccelerationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"` // Acceleration in m/s^2 in x direction
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"` // Acceleration in m/s^2 in y direction
	Z float32 `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"` // Acceleration in m/s^2 in z direction
}

func (x *AccelerationResponse) Reset() {
	*x = AccelerationResponse{}
	mi := &file_warp_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccelerationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccelerationResponse) ProtoMessage() {}

func (x *AccelerationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_warp_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccelerationResponse.ProtoReflect.Descriptor instead.
func (*AccelerationResponse) Descriptor() ([]byte, []int) {
	return file_warp_proto_rawDescGZIP(), []int{6}
}

func (x *AccelerationResponse) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *AccelerationResponse) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *AccelerationResponse) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

type RotationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"` // Rotation in deg/s in x direction
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"` // Rotation in deg/s in y direction
	Z float32 `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"` // Rotation in deg/s in z direction
}

func (x *RotationResponse) Reset() {
	*x = RotationResponse{}
	mi := &file_warp_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RotationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotationResponse) ProtoMessage() {}

func (x *RotationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_warp_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotationResponse.ProtoReflect.Descriptor instead.
func (*RotationResponse) Descriptor() ([]byte, []int) {
	return file_warp_proto_rawDescGZIP(), []int{7}
}

func (x *RotationResponse) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *RotationResponse) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *RotationResponse) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

type SpacialDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Altitude     *AltitudeResponse     `protobuf:"bytes,1,opt,name=altitude,proto3" json:"altitude,omitempty"`         // Altitude of the rocket
	Acceleration *AccelerationResponse `protobuf:"bytes,2,opt,name=acceleration,proto3" json:"acceleration,omitempty"` // Acceleration of the rocket
	Rotation     *RotationResponse     `protobuf:"bytes,3,opt,name=rotation,proto3" json:"rotation,omitempty"`         // Rotation of the rocket
	Velocity     *Velocity             `protobuf:"bytes,4,opt,name=velocity,proto3" json:"velocity,omitempty"`         // Velocity of the rocket
}

func (x *SpacialDataResponse) Reset() {
	*x = SpacialDataResponse{}
	mi := &file_warp_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpacialDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpacialDataResponse) ProtoMessage() {}

func (x *SpacialDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_warp_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpacialDataResponse.ProtoReflect.Descriptor instead.
func (*SpacialDataResponse) Descriptor() ([]byte, []int) {
	return file_warp_proto_rawDescGZIP(), []int{8}
}

func (x *SpacialDataResponse) GetAltitude() *AltitudeResponse {
	if x != nil {
		return x.Altitude
	}
	return nil
}

func (x *SpacialDataResponse) GetAcceleration() *AccelerationResponse {
	if x != nil {
		return x.Acceleration
	}
	return nil
}

func (x *SpacialDataResponse) GetRotation() *RotationResponse {
	if x != nil {
		return x.Rotation
	}
	return nil
}

func (x *SpacialDataResponse) GetVelocity() *Velocity {
	if x != nil {
		return x.Velocity
	}
	return nil
}

type LogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Log string `protobuf:"bytes,1,opt,name=log,proto3" json:"log,omitempty"` // Log message
}

func (x *LogResponse) Reset() {
	*x = LogResponse{}
	mi := &file_warp_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogResponse) ProtoMessage() {}

func (x *LogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_warp_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogResponse.ProtoReflect.Descriptor instead.
func (*LogResponse) Descriptor() ([]byte, []int) {
	return file_warp_proto_rawDescGZIP(), []int{9}
}

func (x *LogResponse) GetLog() string {
	if x != nil {
		return x.Log
	}
	return ""
}

type LogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs map[int32]string `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Logs in the format id:timestamp
}

func (x *LogsResponse) Reset() {
	*x = LogsResponse{}
	mi := &file_warp_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogsResponse) ProtoMessage() {}

func (x *LogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_warp_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogsResponse.ProtoReflect.Descriptor instead.
func (*LogsResponse) Descriptor() ([]byte, []int) {
	return file_warp_proto_rawDescGZIP(), []int{10}
}

func (x *LogsResponse) GetLogs() map[int32]string {
	if x != nil {
		return x.Logs
	}
	return nil
}

type LoggingStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status LoggingStatus `protobuf:"varint,1,opt,name=status,proto3,enum=main.LoggingStatus" json:"status,omitempty"` // Status of the logging
}

func (x *LoggingStatusResponse) Reset() {
	*x = LoggingStatusResponse{}
	mi := &file_warp_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoggingStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggingStatusResponse) ProtoMessage() {}

func (x *LoggingStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_warp_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggingStatusResponse.ProtoReflect.Descriptor instead.
func (*LoggingStatusResponse) Descriptor() ([]byte, []int) {
	return file_warp_proto_rawDescGZIP(), []int{11}
}

func (x *LoggingStatusResponse) GetStatus() LoggingStatus {
	if x != nil {
		return x.Status
	}
	return LoggingStatus_LOGGING_IDLE
}

type LogByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // Log id
}

func (x *LogByIdRequest) Reset() {
	*x = LogByIdRequest{}
	mi := &file_warp_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogByIdRequest) ProtoMessage() {}

func (x *LogByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_warp_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogByIdRequest.ProtoReflect.Descriptor instead.
func (*LogByIdRequest) Descriptor() ([]byte, []int) {
	return file_warp_proto_rawDescGZIP(), []int{12}
}

func (x *LogByIdRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateLiveDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp   string               `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`             // Timestamp of the data
	MaxAltitude float32              `protobuf:"fixed32,2,opt,name=maxAltitude,proto3" json:"maxAltitude,omitempty"`       // Max altitude in m
	Status      Status               `protobuf:"varint,3,opt,name=status,proto3,enum=main.Status" json:"status,omitempty"` // Status of the rocket
	Voltage     int64                `protobuf:"varint,4,opt,name=voltage,proto3" json:"voltage,omitempty"`                // Voltage in mV
	SpacialData *SpacialDataResponse `protobuf:"bytes,5,opt,name=spacialData,proto3" json:"spacialData,omitempty"`         // Spacial data of the rocket
}

func (x *UpdateLiveDataRequest) Reset() {
	*x = UpdateLiveDataRequest{}
	mi := &file_warp_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLiveDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLiveDataRequest) ProtoMessage() {}

func (x *UpdateLiveDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_warp_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLiveDataRequest.ProtoReflect.Descriptor instead.
func (*UpdateLiveDataRequest) Descriptor() ([]byte, []int) {
	return file_warp_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateLiveDataRequest) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *UpdateLiveDataRequest) GetMaxAltitude() float32 {
	if x != nil {
		return x.MaxAltitude
	}
	return 0
}

func (x *UpdateLiveDataRequest) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_ROCKET_IDLE
}

func (x *UpdateLiveDataRequest) GetVoltage() int64 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

func (x *UpdateLiveDataRequest) GetSpacialData() *SpacialDataResponse {
	if x != nil {
		return x.SpacialData
	}
	return nil
}

type BaseStationStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status BaseStationStatus `protobuf:"varint,1,opt,name=status,proto3,enum=main.BaseStationStatus" json:"status,omitempty"` // Status of the base station
}

func (x *BaseStationStatusResponse) Reset() {
	*x = BaseStationStatusResponse{}
	mi := &file_warp_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseStationStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseStationStatusResponse) ProtoMessage() {}

func (x *BaseStationStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_warp_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseStationStatusResponse.ProtoReflect.Descriptor instead.
func (*BaseStationStatusResponse) Descriptor() ([]byte, []int) {
	return file_warp_proto_rawDescGZIP(), []int{14}
}

func (x *BaseStationStatusResponse) GetStatus() BaseStationStatus {
	if x != nil {
		return x.Status
	}
	return BaseStationStatus_BASE_STATION_IDLE
}

type PressureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pressure float32 `protobuf:"fixed32,1,opt,name=pressure,proto3" json:"pressure,omitempty"` // Pressure in Pa
}

func (x *PressureResponse) Reset() {
	*x = PressureResponse{}
	mi := &file_warp_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PressureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PressureResponse) ProtoMessage() {}

func (x *PressureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_warp_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PressureResponse.ProtoReflect.Descriptor instead.
func (*PressureResponse) Descriptor() ([]byte, []int) {
	return file_warp_proto_rawDescGZIP(), []int{15}
}

func (x *PressureResponse) GetPressure() float32 {
	if x != nil {
		return x.Pressure
	}
	return 0
}

type GoalPressureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoalPressure float32 `protobuf:"fixed32,1,opt,name=goalPressure,proto3" json:"goalPressure,omitempty"` // Goal pressure in Pa
}

func (x *GoalPressureRequest) Reset() {
	*x = GoalPressureRequest{}
	mi := &file_warp_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoalPressureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoalPressureRequest) ProtoMessage() {}

func (x *GoalPressureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_warp_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoalPressureRequest.ProtoReflect.Descriptor instead.
func (*GoalPressureRequest) Descriptor() ([]byte, []int) {
	return file_warp_proto_rawDescGZIP(), []int{16}
}

func (x *GoalPressureRequest) GetGoalPressure() float32 {
	if x != nil {
		return x.GoalPressure
	}
	return 0
}

type SetControlServiceAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` // Address of the control service
}

func (x *SetControlServiceAddressRequest) Reset() {
	*x = SetControlServiceAddressRequest{}
	mi := &file_warp_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetControlServiceAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetControlServiceAddressRequest) ProtoMessage() {}

func (x *SetControlServiceAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_warp_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetControlServiceAddressRequest.ProtoReflect.Descriptor instead.
func (*SetControlServiceAddressRequest) Descriptor() ([]byte, []int) {
	return file_warp_proto_rawDescGZIP(), []int{17}
}

func (x *SetControlServiceAddressRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

var File_warp_proto protoreflect.FileDescriptor

var file_warp_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x77, 0x61, 0x72, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6d, 0x61,
	0x69, 0x6e, 0x22, 0x34, 0x0a, 0x08, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x0c,
	0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x16, 0x0a, 0x14, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x0a, 0x0f, 0x56, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x22, 0x36, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2e,
	0x0a, 0x10, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0x40,
	0x0a, 0x14, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x7a,
	0x22, 0x3c, 0x0a, 0x10, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79,
	0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x22, 0xe9,
	0x01, 0x0a, 0x13, 0x53, 0x70, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x61, 0x63,
	0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x61, 0x63,
	0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x08, 0x72, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a,
	0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79,
	0x52, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x22, 0x1f, 0x0a, 0x0b, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x22, 0x79, 0x0a, 0x0c, 0x4c,
	0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x6c,
	0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x6f,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x1a, 0x37, 0x0a,
	0x09, 0x4c, 0x6f, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x44, 0x0a, 0x15, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x20, 0x0a, 0x0e,
	0x4c, 0x6f, 0x67, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd4,
	0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x41, 0x6c, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6d, 0x61, 0x78,
	0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x70, 0x61, 0x63,
	0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x73, 0x70, 0x61, 0x63, 0x69, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x4c, 0x0a, 0x19, 0x42, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x2e, 0x0a, 0x10, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x75, 0x72, 0x65, 0x22, 0x39, 0x0a, 0x13, 0x47, 0x6f, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x73,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x6f,
	0x61, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0c, 0x67, 0x6f, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x22, 0x3b,
	0x0a, 0x1f, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2a, 0xd5, 0x01, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4f, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x4f, 0x43, 0x4b, 0x45,
	0x54, 0x5f, 0x41, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x4f, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x53, 0x43, 0x45,
	0x4e, 0x54, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x50,
	0x4f, 0x57, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x41, 0x53, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12,
	0x1b, 0x0a, 0x17, 0x52, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x55, 0x4e, 0x50, 0x4f, 0x57, 0x45,
	0x52, 0x45, 0x44, 0x5f, 0x41, 0x53, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e,
	0x52, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x05,
	0x12, 0x1c, 0x0a, 0x18, 0x52, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x43,
	0x48, 0x55, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x11,
	0x0a, 0x0d, 0x52, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x4c, 0x41, 0x4e, 0x44, 0x45, 0x44, 0x10,
	0x07, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x08, 0x2a, 0x48, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x5f,
	0x49, 0x44, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e,
	0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x4f,
	0x47, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x2a, 0xc9, 0x01,
	0x0a, 0x11, 0x42, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x41,
	0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x52, 0x4d, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4c, 0x41, 0x55, 0x4e, 0x43, 0x48, 0x45, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a,
	0x14, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x42,
	0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x41, 0x53, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x52,
	0x45, 0x53, 0x53, 0x55, 0x52, 0x45, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x41, 0x53, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x52, 0x4d, 0x49, 0x4e, 0x47, 0x10,
	0x05, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x32, 0x9b, 0x0f, 0x0a, 0x12, 0x57, 0x61,
	0x74, 0x65, 0x72, 0x52, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x30, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x0b,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x15, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0b, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x0b, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0b, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61,
	0x63, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0b, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x70, 0x61,
	0x63, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x35, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x78, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x0b, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x16, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d, 0x69,
	0x6e, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x0b, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x6c,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28,
	0x0a, 0x06, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x0b, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c,
	0x6f, 0x67, 0x73, 0x12, 0x0b, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x42, 0x79,
	0x49, 0x64, 0x12, 0x14, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0b, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x12, 0x0b, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x1a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x41,
	0x72, 0x6d, 0x12, 0x0b, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x1a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x44,
	0x69, 0x73, 0x61, 0x72, 0x6d, 0x12, 0x0b, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x12, 0x0b, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x63, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x30, 0x0a, 0x05, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x12, 0x0b, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41,
	0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0f, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x50, 0x61, 0x72,
	0x61, 0x63, 0x68, 0x75, 0x74, 0x65, 0x12, 0x0b, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x63, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x36, 0x0a, 0x0b, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x0b,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x0b, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x07,
	0x4c, 0x6f, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x0b, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x63, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3f, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x47,
	0x79, 0x72, 0x6f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x0b, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x63, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x43, 0x0a, 0x18, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x0b, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x74, 0x65, 0x42, 0x61, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x0b,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x17, 0x52, 0x65, 0x63, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x6f, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x12, 0x0b, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x1a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x52,
	0x65, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x47, 0x50, 0x53, 0x12, 0x0b, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4d,
	0x61, 0x78, 0x12, 0x0b, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x1a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x0b, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x63, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x39, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x47, 0x79, 0x72, 0x6f, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x12, 0x0b, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x1a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x12, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x12, 0x0b, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x42, 0x61, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x0b, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4d, 0x61,
	0x67, 0x6e, 0x65, 0x74, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x0b, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41,
	0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x74, 0x47, 0x50, 0x53, 0x12,
	0x0b, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x5b, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0xc9, 0x04, 0x0a, 0x12, 0x42, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65,
	0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x0b, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x16, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x47, 0x6f, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x0b, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x50, 0x72, 0x65,
	0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x19, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x47, 0x6f, 0x61,
	0x6c, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05,
	0x41, 0x62, 0x6f, 0x72, 0x74, 0x12, 0x0b, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x03, 0x41, 0x72, 0x6d, 0x12, 0x0b, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x44, 0x69, 0x73, 0x61, 0x72, 0x6d, 0x12, 0x0b, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x63, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x12, 0x0b, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x74, 0x65, 0x42, 0x61, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x0b, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x42, 0x61,
	0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x0b, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x63, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x08, 0x5a, 0x06, 0x2e, 0x2f, 0x77, 0x61, 0x72, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_warp_proto_rawDescOnce sync.Once
	file_warp_proto_rawDescData = file_warp_proto_rawDesc
)

func file_warp_proto_rawDescGZIP() []byte {
	file_warp_proto_rawDescOnce.Do(func() {
		file_warp_proto_rawDescData = protoimpl.X.CompressGZIP(file_warp_proto_rawDescData)
	})
	return file_warp_proto_rawDescData
}

var file_warp_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_warp_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_warp_proto_goTypes = []any{
	(Status)(0),                             // 0: main.Status
	(LoggingStatus)(0),                      // 1: main.LoggingStatus
	(BaseStationStatus)(0),                  // 2: main.BaseStationStatus
	(*Velocity)(nil),                        // 3: main.Velocity
	(*Empty)(nil),                           // 4: main.Empty
	(*AcknowledgedResponse)(nil),            // 5: main.AcknowledgedResponse
	(*VoltageResponse)(nil),                 // 6: main.VoltageResponse
	(*StatusResponse)(nil),                  // 7: main.StatusResponse
	(*AltitudeResponse)(nil),                // 8: main.AltitudeResponse
	(*AccelerationResponse)(nil),            // 9: main.AccelerationResponse
	(*RotationResponse)(nil),                // 10: main.RotationResponse
	(*SpacialDataResponse)(nil),             // 11: main.SpacialDataResponse
	(*LogResponse)(nil),                     // 12: main.LogResponse
	(*LogsResponse)(nil),                    // 13: main.LogsResponse
	(*LoggingStatusResponse)(nil),           // 14: main.LoggingStatusResponse
	(*LogByIdRequest)(nil),                  // 15: main.LogByIdRequest
	(*UpdateLiveDataRequest)(nil),           // 16: main.UpdateLiveDataRequest
	(*BaseStationStatusResponse)(nil),       // 17: main.BaseStationStatusResponse
	(*PressureResponse)(nil),                // 18: main.PressureResponse
	(*GoalPressureRequest)(nil),             // 19: main.GoalPressureRequest
	(*SetControlServiceAddressRequest)(nil), // 20: main.SetControlServiceAddressRequest
	nil,                                     // 21: main.LogsResponse.LogsEntry
}
var file_warp_proto_depIdxs = []int32{
	0,  // 0: main.StatusResponse.status:type_name -> main.Status
	8,  // 1: main.SpacialDataResponse.altitude:type_name -> main.AltitudeResponse
	9,  // 2: main.SpacialDataResponse.acceleration:type_name -> main.AccelerationResponse
	10, // 3: main.SpacialDataResponse.rotation:type_name -> main.RotationResponse
	3,  // 4: main.SpacialDataResponse.velocity:type_name -> main.Velocity
	21, // 5: main.LogsResponse.logs:type_name -> main.LogsResponse.LogsEntry
	1,  // 6: main.LoggingStatusResponse.status:type_name -> main.LoggingStatus
	0,  // 7: main.UpdateLiveDataRequest.status:type_name -> main.Status
	11, // 8: main.UpdateLiveDataRequest.spacialData:type_name -> main.SpacialDataResponse
	2,  // 9: main.BaseStationStatusResponse.status:type_name -> main.BaseStationStatus
	4,  // 10: main.WaterRocketService.GetVoltage:input_type -> main.Empty
	4,  // 11: main.WaterRocketService.GetStatus:input_type -> main.Empty
	4,  // 12: main.WaterRocketService.GetAltitude:input_type -> main.Empty
	4,  // 13: main.WaterRocketService.GetAcceleration:input_type -> main.Empty
	4,  // 14: main.WaterRocketService.GetRotation:input_type -> main.Empty
	4,  // 15: main.WaterRocketService.GetSpacialData:input_type -> main.Empty
	4,  // 16: main.WaterRocketService.GetMaxAltitude:input_type -> main.Empty
	4,  // 17: main.WaterRocketService.GetMinAltitude:input_type -> main.Empty
	4,  // 18: main.WaterRocketService.GetLog:input_type -> main.Empty
	4,  // 19: main.WaterRocketService.GetLogs:input_type -> main.Empty
	15, // 20: main.WaterRocketService.GetLogById:input_type -> main.LogByIdRequest
	4,  // 21: main.WaterRocketService.GetLoggingStatus:input_type -> main.Empty
	4,  // 22: main.WaterRocketService.Reset:input_type -> main.Empty
	4,  // 23: main.WaterRocketService.Arm:input_type -> main.Empty
	4,  // 24: main.WaterRocketService.Disarm:input_type -> main.Empty
	4,  // 25: main.WaterRocketService.Launch:input_type -> main.Empty
	4,  // 26: main.WaterRocketService.Abort:input_type -> main.Empty
	4,  // 27: main.WaterRocketService.DeployParachute:input_type -> main.Empty
	4,  // 28: main.WaterRocketService.DeployStage:input_type -> main.Empty
	4,  // 29: main.WaterRocketService.LogStart:input_type -> main.Empty
	4,  // 30: main.WaterRocketService.LogStop:input_type -> main.Empty
	4,  // 31: main.WaterRocketService.RecalibrateGyroscope:input_type -> main.Empty
	4,  // 32: main.WaterRocketService.RecalibrateAccelerometer:input_type -> main.Empty
	4,  // 33: main.WaterRocketService.RecalibrateBarometer:input_type -> main.Empty
	4,  // 34: main.WaterRocketService.RecalibrateMagnetometer:input_type -> main.Empty
	4,  // 35: main.WaterRocketService.RecalibrateGPS:input_type -> main.Empty
	4,  // 36: main.WaterRocketService.ResetMax:input_type -> main.Empty
	4,  // 37: main.WaterRocketService.ResetMin:input_type -> main.Empty
	4,  // 38: main.WaterRocketService.ResetGyroscope:input_type -> main.Empty
	4,  // 39: main.WaterRocketService.ResetAccelerometer:input_type -> main.Empty
	4,  // 40: main.WaterRocketService.ResetBarometer:input_type -> main.Empty
	4,  // 41: main.WaterRocketService.ResetMagnetometer:input_type -> main.Empty
	4,  // 42: main.WaterRocketService.ResetGPS:input_type -> main.Empty
	20, // 43: main.WaterRocketService.SetControlServiceAddress:input_type -> main.SetControlServiceAddressRequest
	16, // 44: main.ControlService.UpdateLiveData:input_type -> main.UpdateLiveDataRequest
	4,  // 45: main.BaseStationService.GetStatus:input_type -> main.Empty
	4,  // 46: main.BaseStationService.GetPressure:input_type -> main.Empty
	4,  // 47: main.BaseStationService.GetGoalPressure:input_type -> main.Empty
	19, // 48: main.BaseStationService.SetGoalPressure:input_type -> main.GoalPressureRequest
	4,  // 49: main.BaseStationService.Abort:input_type -> main.Empty
	4,  // 50: main.BaseStationService.Arm:input_type -> main.Empty
	4,  // 51: main.BaseStationService.Disarm:input_type -> main.Empty
	4,  // 52: main.BaseStationService.Launch:input_type -> main.Empty
	4,  // 53: main.BaseStationService.RecalibrateBarometer:input_type -> main.Empty
	4,  // 54: main.BaseStationService.ResetBarometer:input_type -> main.Empty
	6,  // 55: main.WaterRocketService.GetVoltage:output_type -> main.VoltageResponse
	7,  // 56: main.WaterRocketService.GetStatus:output_type -> main.StatusResponse
	8,  // 57: main.WaterRocketService.GetAltitude:output_type -> main.AltitudeResponse
	9,  // 58: main.WaterRocketService.GetAcceleration:output_type -> main.AccelerationResponse
	10, // 59: main.WaterRocketService.GetRotation:output_type -> main.RotationResponse
	11, // 60: main.WaterRocketService.GetSpacialData:output_type -> main.SpacialDataResponse
	8,  // 61: main.WaterRocketService.GetMaxAltitude:output_type -> main.AltitudeResponse
	8,  // 62: main.WaterRocketService.GetMinAltitude:output_type -> main.AltitudeResponse
	12, // 63: main.WaterRocketService.GetLog:output_type -> main.LogResponse
	13, // 64: main.WaterRocketService.GetLogs:output_type -> main.LogsResponse
	12, // 65: main.WaterRocketService.GetLogById:output_type -> main.LogResponse
	14, // 66: main.WaterRocketService.GetLoggingStatus:output_type -> main.LoggingStatusResponse
	5,  // 67: main.WaterRocketService.Reset:output_type -> main.AcknowledgedResponse
	5,  // 68: main.WaterRocketService.Arm:output_type -> main.AcknowledgedResponse
	5,  // 69: main.WaterRocketService.Disarm:output_type -> main.AcknowledgedResponse
	5,  // 70: main.WaterRocketService.Launch:output_type -> main.AcknowledgedResponse
	5,  // 71: main.WaterRocketService.Abort:output_type -> main.AcknowledgedResponse
	5,  // 72: main.WaterRocketService.DeployParachute:output_type -> main.AcknowledgedResponse
	5,  // 73: main.WaterRocketService.DeployStage:output_type -> main.AcknowledgedResponse
	5,  // 74: main.WaterRocketService.LogStart:output_type -> main.AcknowledgedResponse
	5,  // 75: main.WaterRocketService.LogStop:output_type -> main.AcknowledgedResponse
	5,  // 76: main.WaterRocketService.RecalibrateGyroscope:output_type -> main.AcknowledgedResponse
	5,  // 77: main.WaterRocketService.RecalibrateAccelerometer:output_type -> main.AcknowledgedResponse
	5,  // 78: main.WaterRocketService.RecalibrateBarometer:output_type -> main.AcknowledgedResponse
	5,  // 79: main.WaterRocketService.RecalibrateMagnetometer:output_type -> main.AcknowledgedResponse
	5,  // 80: main.WaterRocketService.RecalibrateGPS:output_type -> main.AcknowledgedResponse
	5,  // 81: main.WaterRocketService.ResetMax:output_type -> main.AcknowledgedResponse
	5,  // 82: main.WaterRocketService.ResetMin:output_type -> main.AcknowledgedResponse
	5,  // 83: main.WaterRocketService.ResetGyroscope:output_type -> main.AcknowledgedResponse
	5,  // 84: main.WaterRocketService.ResetAccelerometer:output_type -> main.AcknowledgedResponse
	5,  // 85: main.WaterRocketService.ResetBarometer:output_type -> main.AcknowledgedResponse
	5,  // 86: main.WaterRocketService.ResetMagnetometer:output_type -> main.AcknowledgedResponse
	5,  // 87: main.WaterRocketService.ResetGPS:output_type -> main.AcknowledgedResponse
	5,  // 88: main.WaterRocketService.SetControlServiceAddress:output_type -> main.AcknowledgedResponse
	5,  // 89: main.ControlService.UpdateLiveData:output_type -> main.AcknowledgedResponse
	17, // 90: main.BaseStationService.GetStatus:output_type -> main.BaseStationStatusResponse
	18, // 91: main.BaseStationService.GetPressure:output_type -> main.PressureResponse
	18, // 92: main.BaseStationService.GetGoalPressure:output_type -> main.PressureResponse
	5,  // 93: main.BaseStationService.SetGoalPressure:output_type -> main.AcknowledgedResponse
	5,  // 94: main.BaseStationService.Abort:output_type -> main.AcknowledgedResponse
	5,  // 95: main.BaseStationService.Arm:output_type -> main.AcknowledgedResponse
	5,  // 96: main.BaseStationService.Disarm:output_type -> main.AcknowledgedResponse
	5,  // 97: main.BaseStationService.Launch:output_type -> main.AcknowledgedResponse
	5,  // 98: main.BaseStationService.RecalibrateBarometer:output_type -> main.AcknowledgedResponse
	5,  // 99: main.BaseStationService.ResetBarometer:output_type -> main.AcknowledgedResponse
	55, // [55:100] is the sub-list for method output_type
	10, // [10:55] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_warp_proto_init() }
func file_warp_proto_init() {
	if File_warp_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_warp_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_warp_proto_goTypes,
		DependencyIndexes: file_warp_proto_depIdxs,
		EnumInfos:         file_warp_proto_enumTypes,
		MessageInfos:      file_warp_proto_msgTypes,
	}.Build()
	File_warp_proto = out.File
	file_warp_proto_rawDesc = nil
	file_warp_proto_goTypes = nil
	file_warp_proto_depIdxs = nil
}
